/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package puzzlesolver;

import java.awt.Font;
import java.awt.Graphics;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;


/**
 *
 * @author Grant
 */
public class PuzzleSolveFrame extends javax.swing.JFrame {

    private static Graphics G;
    private StateManager manager;
    private static BreadthFirst breadth;
    private static SearchMethod method;
    private List<State> winPath;
    private int position;
    private int intSteps;
    private int intDepth;
    private long runTime;
    private Thread solveThread;
    private boolean loadReady = false;
    private State curStartState = null;
   /**
    * Creates new form PuzzleSolveFram
    */
   public PuzzleSolveFrame() {
      initComponents();
      G = MainPannel.getGraphics();
      breadth = new BreadthFirst();
      position = 0;
      generateState();
      manager = new StateManager(curStartState);
      generatePuzzle();
      insertNumbers();
      
      new Thread(new WaitToLoad()).start();
   }

   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      jScrollPane1 = new javax.swing.JScrollPane();
      jTextArea1 = new javax.swing.JTextArea();
      jButton4 = new javax.swing.JButton();
      MainPannel = new javax.swing.JPanel();
      jPanel2 = new javax.swing.JPanel();
      BreadthSolve = new javax.swing.JButton();
      jButton2 = new javax.swing.JButton();
      jButton3 = new javax.swing.JButton();
      DrawBTN = new javax.swing.JButton();
      A = new javax.swing.JTextField();
      B = new javax.swing.JTextField();
      C = new javax.swing.JTextField();
      D = new javax.swing.JTextField();
      E = new javax.swing.JTextField();
      F = new javax.swing.JTextField();
      GB = new javax.swing.JTextField();
      H = new javax.swing.JTextField();
      I = new javax.swing.JTextField();
      Next = new javax.swing.JButton();
      Reset = new javax.swing.JButton();
      Previous = new javax.swing.JButton();
      btnShuffle = new javax.swing.JButton();
      jPanel1 = new javax.swing.JPanel();
      jLabel1 = new javax.swing.JLabel();
      Time = new javax.swing.JTextField();
      Steps = new javax.swing.JTextField();
      jLabel2 = new javax.swing.JLabel();
      jLabel3 = new javax.swing.JLabel();
      depth = new javax.swing.JTextField();
      jLabel4 = new javax.swing.JLabel();

      jTextArea1.setColumns(20);
      jTextArea1.setRows(5);
      jScrollPane1.setViewportView(jTextArea1);

      jButton4.setText("jButton4");

      setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
      addComponentListener(new java.awt.event.ComponentAdapter() {
         public void componentResized(java.awt.event.ComponentEvent evt) {
            formComponentResized(evt);
         }
      });

      MainPannel.setBackground(new java.awt.Color(102, 102, 102));
      MainPannel.addComponentListener(new java.awt.event.ComponentAdapter() {
         public void componentResized(java.awt.event.ComponentEvent evt) {
            MainPannelComponentResized(evt);
         }
      });

      javax.swing.GroupLayout MainPannelLayout = new javax.swing.GroupLayout(MainPannel);
      MainPannel.setLayout(MainPannelLayout);
      MainPannelLayout.setHorizontalGroup(
         MainPannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 0, Short.MAX_VALUE)
      );
      MainPannelLayout.setVerticalGroup(
         MainPannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 337, Short.MAX_VALUE)
      );

      jPanel2.setBackground(new java.awt.Color(51, 255, 0));

      BreadthSolve.setText("Breadth First");
      BreadthSolve.setToolTipText("");
      BreadthSolve.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            BreadthSolveActionPerformed(evt);
         }
      });

      jButton2.setText("A Star");
      jButton2.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton2ActionPerformed(evt);
         }
      });

      jButton3.setText("Beam Search");

      DrawBTN.setText("Draw");
      DrawBTN.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            DrawBTNActionPerformed(evt);
         }
      });

      A.setMaximumSize(new java.awt.Dimension(20, 20));
      A.setMinimumSize(new java.awt.Dimension(20, 20));
      A.setPreferredSize(new java.awt.Dimension(20, 20));

      B.setMaximumSize(new java.awt.Dimension(20, 20));
      B.setMinimumSize(new java.awt.Dimension(20, 20));
      B.setPreferredSize(new java.awt.Dimension(20, 20));

      C.setPreferredSize(new java.awt.Dimension(20, 20));

      D.setPreferredSize(new java.awt.Dimension(20, 20));

      E.setPreferredSize(new java.awt.Dimension(20, 20));

      F.setPreferredSize(new java.awt.Dimension(20, 20));

      GB.setPreferredSize(new java.awt.Dimension(20, 20));

      H.setPreferredSize(new java.awt.Dimension(20, 20));

      I.setPreferredSize(new java.awt.Dimension(20, 20));

      Next.setText("Next >>");
      Next.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            NextActionPerformed(evt);
         }
      });

      Reset.setText("Reset");
      Reset.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            ResetActionPerformed(evt);
         }
      });

      Previous.setText("<< Previous");
      Previous.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            PreviousActionPerformed(evt);
         }
      });

      btnShuffle.setText("Shuffle");
      btnShuffle.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnShuffleActionPerformed(evt);
         }
      });

      javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
      jPanel2.setLayout(jPanel2Layout);
      jPanel2Layout.setHorizontalGroup(
         jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(jPanel2Layout.createSequentialGroup()
                  .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(D, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(A, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                  .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(B, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(C, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                     .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(E, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(F, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
               .addGroup(jPanel2Layout.createSequentialGroup()
                  .addComponent(GB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(H, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(I, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 75, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(Previous, javax.swing.GroupLayout.Alignment.TRAILING)
               .addComponent(btnShuffle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                  .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                     .addComponent(Reset, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                     .addComponent(DrawBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(Next)
                  .addGap(114, 114, 114)
                  .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                     .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                     .addComponent(BreadthSolve, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
               .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING))
            .addContainerGap())
      );
      jPanel2Layout.setVerticalGroup(
         jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(BreadthSolve)
               .addComponent(A, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(B, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(C, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(Next)
               .addComponent(Reset)
               .addComponent(Previous))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jButton2)
               .addComponent(D, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(E, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(F, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(jPanel2Layout.createSequentialGroup()
                  .addGap(8, 8, 8)
                  .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                     .addComponent(jButton3)
                     .addComponent(DrawBTN)
                     .addComponent(btnShuffle)))
               .addGroup(jPanel2Layout.createSequentialGroup()
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                     .addComponent(GB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(H, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(I, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );

      jPanel1.setBackground(new java.awt.Color(255, 255, 255));
      jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
      jPanel1.setForeground(new java.awt.Color(255, 255, 255));

      jLabel1.setText("Test Results");

      jLabel2.setText("Run Time (mS):");

      jLabel3.setText("States Checked:");

      jLabel4.setText("Moves to Win:");

      javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
      jPanel1.setLayout(jPanel1Layout);
      jPanel1Layout.setHorizontalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jLabel2)
               .addComponent(jLabel3)
               .addComponent(jLabel4))
            .addGap(12, 12, 12)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
               .addComponent(Steps)
               .addComponent(Time)
               .addComponent(jLabel1)
               .addComponent(depth, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );
      jPanel1Layout.setVerticalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jLabel1)
            .addGap(18, 18, 18)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(Time, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel2))
            .addGap(39, 39, 39)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(Steps, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel3))
            .addGap(39, 39, 39)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(depth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel4))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addGroup(layout.createSequentialGroup()
                  .addComponent(MainPannel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(MainPannel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(22, 22, 22))
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents

    private void DrawBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DrawBTNActionPerformed
        generatePuzzle();
        insertNumbers();
    }//GEN-LAST:event_DrawBTNActionPerformed

    private void BreadthSolveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BreadthSolveActionPerformed

            setSearchMethod(new BreadthFirst());
            solvePuzzle();
            /*            
            manager.goalState(3, 3);
            G.clearRect(0, 0, 500, 500);
            G.drawString("Working...", 0, 0);
            //Thread.sleep(45000);
            long startTime = System.currentTimeMillis();
            breadth.run(manager);
            runTime = System.currentTimeMillis() - startTime;
            Time.setText(Long.toString(RunTime));
            G.clearRect(0, 0, 500, 500);
            winPath = breadth.getWin();
            intSteps = breadth.getSteps();
            intDepth = breadth.getDepth();
            
            Steps.setText(Integer.toString(breadth.getSteps()));
            depth.setText(Integer.toString(breadth.getDepth()));
            generatePuzzle();
            drawState(winPath.get(position++));*/
    }//GEN-LAST:event_BreadthSolveActionPerformed

    private void NextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NextActionPerformed
        if(position < winPath.size() - 1)
        {
            position++;
            G.clearRect(0, 0, 500, 500);
            generatePuzzle();
            //drawState(winPath.get(position));
        }
    }//GEN-LAST:event_NextActionPerformed

    private void PreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PreviousActionPerformed
        if(position > 0)
        {
            position--;
            G.clearRect(0, 0, 500, 500);
            generatePuzzle();
            //drawState(winPath.get(position));
        }
    }//GEN-LAST:event_PreviousActionPerformed

    private void ResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetActionPerformed
        position = 0;
        //G.clearRect(0, 0, 500, 500);
        generatePuzzle();
        //drawState(winPath.get(position++));
    }//GEN-LAST:event_ResetActionPerformed

   private void btnShuffleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShuffleActionPerformed
      
      generateState();
      winPath = null;
      position = 0;
      drawState(curStartState);
      
      
   }//GEN-LAST:event_btnShuffleActionPerformed

   private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized

   }//GEN-LAST:event_formComponentResized

   private void MainPannelComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_MainPannelComponentResized
      generatePuzzle();
   }//GEN-LAST:event_MainPannelComponentResized

   private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
      
      setSearchMethod(new AStarSearch());
      solvePuzzle();
      
   }//GEN-LAST:event_jButton2ActionPerformed

   
   private void setSearchMethod(SearchMethod m)
   {
      if(method != null)
      {
         //If the method might be running, kill it. 
         method.kill();
      }
      
      method = m;
   }
   
   private void solvePuzzle()
   {
      
      if(solveThread != null)
      {
         while(solveThread != null)
            Thread.yield(); //Wait for the thread to end.
      }
      
      G.clearRect(0, 0, 500, 500);
      G.drawString("Working...", 0, MainPannel.getHeight());
      
      if(curStartState == null)
         generateState();
      
      manager = new StateManager(curStartState);
      manager.goalState(3, 3);
      
      solveThread = new Thread(
              new Runnable() {
         @Override
         public void run() {
            if(method != null)
            {
               long startTime = System.currentTimeMillis();
               method.run(manager);
               runTime = System.currentTimeMillis() - startTime;
               if(method.isHalted())
                  Thread.currentThread().interrupt();
               
               else
               {
                  winPath = method.getWin();
                  intSteps = method.getSteps();
                  intDepth = method.getDepth();
                  loadReady = true;
               }
               
               solveThread = null;
            }           
         }

      }
      );
      
      solveThread.start();
      
   }
   
   private void loadPuzzle()
   {
      System.out.println("LOAD PUZZLE");
      
      G.clearRect(0, 0, 500, 500);
      
      Steps.setText(Integer.toString(intSteps));
      depth.setText(Integer.toString(intDepth));
      Time.setText(Long.toString(runTime));
      generatePuzzle();
      //drawState(winPath.get(position++));
      
   }
   
   private void clearPuzzle()
   {
      G = MainPannel.getGraphics();
      G.clearRect(0, 0, MainPannel.getWidth(), MainPannel.getHeight());
   }
   
    private void generatePuzzle()
    {
       if(winPath != null)
       {
          drawState(winPath.get(position));
       }
       else
       {
          drawState(curStartState);
       }
       
    }
    
    private void insertNumbers()
    {
        G.setFont(new Font ("Ariel",Font.BOLD, 36));
        G.drawString(A.getText(), 115, 88);
        G.drawString(B.getText(), 165, 88);
        G.drawString(C.getText(), 215, 88);
        G.drawString(D.getText(), 115, 138);
        G.drawString(E.getText(), 165, 138);
        G.drawString(F.getText(), 215, 138);
        G.drawString(GB.getText(), 115, 188);
        G.drawString(H.getText(), 165, 188);
        G.drawString(I.getText(), 215, 188);
    }
    
    private void checkFree(String toWrite, int X, int Y)
    {
         G.setFont(new Font ("Ariel",Font.BOLD, 36));
        if(toWrite.equals(Integer.toString(manager.getMovablePiece())))
            G.drawString("X", X, Y);
        else
            G.drawString(toWrite, X, Y);
    }
    
    public State generateState()
    {
/*        int start[][] = new int[3][3];
        //=================
        start[0][0] = 4; //Integer.parseInt(A.getText());
        start[0][1] = 1;//Integer.parseInt(B.getText());
        start[0][2] = 7;//Integer.parseInt(C.getText());
        //=================
        start[1][0] = 9;//Integer.parseInt(D.getText());
        start[1][1] = 6;//Integer.parseInt(E.getText());
        start[1][2] = 5;//Integer.parseInt(F.getText());
        //=================
        start[2][0] = 2;//Integer.parseInt(GB.getText());
        start[2][1] = 3;//Integer.parseInt(H.getText());
        start[2][2] = 8;//Integer.parseInt(I.getText());
        //=================*/
        curStartState = new State(3, 3);
        
        return curStartState;
    }
    
    private void drawState(State toDraw)
    {   
        /*int state[][] = toDraw.getState();
        G.setFont(new Font ("Ariel",Font.BOLD, 36));
        checkFree(Integer.toString(state[0][0]), 115, 88);
        checkFree(Integer.toString(state[0][1]), 165, 88);
        checkFree(Integer.toString(state[0][2]), 215, 88);
        checkFree(Integer.toString(state[1][0]), 115, 138);
        checkFree(Integer.toString(state[1][1]), 165, 138);
        checkFree(Integer.toString(state[1][2]), 215, 138);
        checkFree(Integer.toString(state[2][0]), 115, 188);
        checkFree(Integer.toString(state[2][1]), 165, 188);
        checkFree(Integer.toString(state[2][2]), 215, 188);*/
        
        G = MainPannel.getGraphics();
      G.clearRect(0, 0, 500, 500);
       //Find the width and height of the region
       int width = MainPannel.getWidth();
       int height = MainPannel.getHeight();
       
       //How many grids do we need?
       //3 x 3 for now.
       int grid_width = 3;
       int grid_height = 3;
       
       int shortest_side_length = Math.min(width, height);
       
       int grid_side_length = shortest_side_length/Math.max(grid_width, grid_height);
       
       int width_mid = width/2;
       int height_mid = height/2;
       int top_left_x = width_mid - (grid_side_length * grid_width)/2;
       int top_left_y = height_mid - (grid_side_length * grid_height)/2;
       
       
       for(int i = 0; i < grid_height; i++)
          for(int j = 0; j < grid_width; j++)
          {
            G.drawRect(top_left_x + j * grid_side_length 
                    , top_left_y + i * grid_side_length, grid_side_length, grid_side_length);
               checkFree(Integer.toString(toDraw.getState()[j][i]), 
                       top_left_x + j * grid_side_length , 
                       top_left_y + i * grid_side_length + grid_side_length);
          }
        
        
    }
    
    private class WaitToLoad implements Runnable{

      @Override
      public void run() {
        
         for(;;)
         {
            if(loadReady)
            {
               loadReady = false;
               java.awt.EventQueue.invokeLater(new Runnable(){
                  @Override
                  public void run() {
                     loadPuzzle();
                  }   
               });
            }
            Thread.yield();
            
         }
         
      }
       
    }
    
    
   /**
    * @param args the command line arguments
    */
   public static void main(String args[]) {
      /* Set the Nimbus look and feel */
      //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
      /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
       */
      try {
         for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
               javax.swing.UIManager.setLookAndFeel(info.getClassName());
               break;
            }
         }
      } catch (ClassNotFoundException ex) {
         java.util.logging.Logger.getLogger(PuzzleSolveFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (InstantiationException ex) {
         java.util.logging.Logger.getLogger(PuzzleSolveFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (IllegalAccessException ex) {
         java.util.logging.Logger.getLogger(PuzzleSolveFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (javax.swing.UnsupportedLookAndFeelException ex) {
         java.util.logging.Logger.getLogger(PuzzleSolveFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
      //</editor-fold>
      //</editor-fold>

      /* Create and display the form */
      java.awt.EventQueue.invokeLater(new Runnable() {
         public void run() {
            new PuzzleSolveFrame().setVisible(true);

           
         }
      });
   }

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JTextField A;
   private javax.swing.JTextField B;
   private javax.swing.JButton BreadthSolve;
   private javax.swing.JTextField C;
   private javax.swing.JTextField D;
   private javax.swing.JButton DrawBTN;
   private javax.swing.JTextField E;
   private javax.swing.JTextField F;
   private javax.swing.JTextField GB;
   private javax.swing.JTextField H;
   private javax.swing.JTextField I;
   private javax.swing.JPanel MainPannel;
   private javax.swing.JButton Next;
   private javax.swing.JButton Previous;
   private javax.swing.JButton Reset;
   private javax.swing.JTextField Steps;
   private javax.swing.JTextField Time;
   private javax.swing.JButton btnShuffle;
   private javax.swing.JTextField depth;
   private javax.swing.JButton jButton2;
   private javax.swing.JButton jButton3;
   private javax.swing.JButton jButton4;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabel3;
   private javax.swing.JLabel jLabel4;
   private javax.swing.JPanel jPanel1;
   private javax.swing.JPanel jPanel2;
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JTextArea jTextArea1;
   // End of variables declaration//GEN-END:variables
}
